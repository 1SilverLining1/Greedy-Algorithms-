//https://leetcode.com/problems/queue-reconstruction-by-height/
class Solution {
public:
    
    static bool comp ( pair < int , int > p1  , pair < int , int > p2 )
    {
        if ( p1.first < p2.first )
                return 1 ;
        else if ( p1.first > p2.first )
                return 0 ;
        else 
        {
            if ( p1.second > p2.second )
                    return 1 ; 
            return 0 ; 
        }
    }
    vector<vector<int>> reconstructQueue(vector<vector<int>>& p) {
        
        
        int n = p.size() ; 
     vector < vector < int > > ans ; 

        if ( n == 0 )
                return ans ; 
        vector < pair < int  , int > > v ; 
        for ( int i = 0 ; i <  p.size() ; i ++ )
        {
                     
                v.push_back ( {  p [ i ] [ 0 ]  , p [ i ] [ 1 ] } ) ;

        }
       
        sort ( v.begin() , v.end() , comp  ) ;
      /// for ( int i = 0 ; i < n ; i ++ )
           // cout << v [ i ] .first << " " << v[ i ] .second << endl ; 
        vector < pair < int , int > > arr ( n ) ; 
        arr [ n - 1 ] .first = v[ v.size() - 1 ] .first ; 
        arr [ n - 1 ] .second = v[ v.size() - 1 ] .second ; 
        for ( int i  = n - 2 ; i >= 0 ; i --)
        {
                int t = v [ i ] .second ;
                int k = i ; 
                for (  k = i ; k < i + t and k < n ; k ++ )
                        arr [ k ] = arr [ k + 1 ] ; 
               
                 arr [ k  ] .first = v [ i ].first  ; 
                 arr [ k ] .second = v [ i ].second ; 
        }
        
        for ( int i = 0 ; i < n ; i ++  )
        {
            ans.push_back ( { arr [ i ] .first , arr [ i ].second  }  ) ; 
        }
        return ans ; 
        
        
    }
};
